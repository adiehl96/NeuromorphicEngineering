/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Demux4
(
    output out_0,
    output out_1,
    output out_2,
    output out_3,
    output out_4,
    output out_5,
    output out_6,
    output out_7,
    output out_8,
    output out_9,
    output out_10,
    output out_11,
    output out_12,
    output out_13,
    output out_14,
    output out_15,
    input [3:0] sel,
    input in
);
    assign out_0 = (sel == 4'h0)? in : 'd0;
    assign out_1 = (sel == 4'h1)? in : 'd0;
    assign out_2 = (sel == 4'h2)? in : 'd0;
    assign out_3 = (sel == 4'h3)? in : 'd0;
    assign out_4 = (sel == 4'h4)? in : 'd0;
    assign out_5 = (sel == 4'h5)? in : 'd0;
    assign out_6 = (sel == 4'h6)? in : 'd0;
    assign out_7 = (sel == 4'h7)? in : 'd0;
    assign out_8 = (sel == 4'h8)? in : 'd0;
    assign out_9 = (sel == 4'h9)? in : 'd0;
    assign out_10 = (sel == 4'ha)? in : 'd0;
    assign out_11 = (sel == 4'hb)? in : 'd0;
    assign out_12 = (sel == 4'hc)? in : 'd0;
    assign out_13 = (sel == 4'hd)? in : 'd0;
    assign out_14 = (sel == 4'he)? in : 'd0;
    assign out_15 = (sel == 4'hf)? in : 'd0;
endmodule


module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module cheap_min (
  input [31:0] a,
  input [31:0] b,
  input [31:0] da,
  input [31:0] db,
  output [31:0] min,
  output [31:0] dmin
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  CompUnsigned #(
    .Bits(32)
  )
  CompUnsigned_i0 (
    .a( a ),
    .b( b ),
    .\> ( s1 ),
    .\= ( s2 ),
    .\< ( s3 )
  );
  assign s0 = (s1 | s2);
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i1 (
    .sel( s0 ),
    .in_0( a ),
    .in_1( b ),
    .out( min )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i2 (
    .sel( s0 ),
    .in_0( da ),
    .in_1( db ),
    .out( dmin )
  );
endmodule

module wires_in_gen0 (
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  output [31:0] min,
  output [31:0] dmin
);
  cheap_min cheap_min_i0 (
    .a( i0 ),
    .b( i1 ),
    .da( di0 ),
    .db( di1 ),
    .min( min ),
    .dmin( dmin )
  );
endmodule

module DIG_D_FF_AS_Nbit
#(
    parameter Bits = 2,
    parameter Default = 0
)
(
   input Set,
   input [(Bits-1):0] D,
   input C,
   input Clr,
   output [(Bits-1):0] Q,
   output [(Bits-1):0] \~Q
);
    reg [(Bits-1):0] state;

    assign Q = state;
    assign \~Q  = ~state;

    always @ (posedge C or posedge Clr or posedge Set)
    begin
        if (Set)
            state <= {Bits{1'b1}};
        else if (Clr)
            state <= 'h0;
        else
            state <= D;
    end

    initial begin
        state = Default;
    end
endmodule

module decreasing_mem (
  input clk,
  input [31:0] in,
  input set,
  input clr,
  input [31:0] din,
  output [31:0] out,
  output [31:0] dout
);
  wire [31:0] out_temp;
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire [31:0] s4;
  wire s5;
  wire [31:0] s6;
  assign s5 = (set | clr);
  // comp
  CompUnsigned #(
    .Bits(32)
  )
  CompUnsigned_i0 (
    .a( in ),
    .b( out_temp ),
    .\> ( s0 ),
    .\= ( s1 ),
    .\< ( s2 )
  );
  // value
  DIG_D_FF_AS_Nbit #(
    .Bits(32),
    .Default(2000000)
  )
  DIG_D_FF_AS_Nbit_i1 (
    .Set( set ),
    .D( in ),
    .C( s3 ),
    .Clr( clr ),
    .Q( out_temp ),
    .\~Q ( s4 )
  );
  // data
  DIG_D_FF_AS_Nbit #(
    .Bits(32),
    .Default(0)
  )
  DIG_D_FF_AS_Nbit_i2 (
    .Set( 1'b0 ),
    .D( din ),
    .C( s3 ),
    .Clr( s5 ),
    .Q( dout ),
    .\~Q ( s6 )
  );
  assign s3 = ((s1 | s2) & clk);
  assign out = out_temp;
endmodule
module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module wires_out_gen0 (
  input [31:0] in,
  input [31:0] din,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire s2;
  wire [31:0] s3;
  wire s4;
  wire s5;
  wire [31:0] s6;
  wire s7;
  wire s8;
  wire [31:0] s9;
  wire s10;
  wire [31:0] s11;
  wire s12;
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i0 (
    .a( din ),
    .b( din ),
    .c_i( 1'b0 ),
    .s( s3 ),
    .c_o( s4 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i1 (
    .a( in ),
    .b( 32'b100 ),
    .c_i( 1'b0 ),
    .s( s9 ),
    .c_o( s10 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i2 (
    .a( in ),
    .b( 32'b1000 ),
    .c_i( 1'b0 ),
    .s( s11 ),
    .c_o( s12 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i3 (
    .a( s3 ),
    .b( s3 ),
    .c_i( 1'b0 ),
    .s( s0 ),
    .c_o( s5 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i4 (
    .sel( s10 ),
    .in_0( s9 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i5 (
    .sel( s12 ),
    .in_0( s11 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o1 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i6 (
    .a( s0 ),
    .b( s0 ),
    .c_i( 1'b0 ),
    .s( s1 ),
    .c_o( s2 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i7 (
    .a( s1 ),
    .b( s1 ),
    .c_i( 1'b0 ),
    .s( s6 ),
    .c_o( s8 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i8 (
    .a( s6 ),
    .b( 32'b0 ),
    .c_i( 1'b0 ),
    .s( dout ),
    .c_o( s7 )
  );
endmodule

module node_module_gen0 (
  input init,
  input clk,
  input clr,
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  output [31:0] own,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1
);
  wire [31:0] own_temp;
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wires_in_gen0 wires_in_gen0_i0 (
    .i0( i0 ),
    .di0( di0 ),
    .i1( i1 ),
    .di1( di1 ),
    .min( s0 ),
    .dmin( s1 )
  );
  decreasing_mem decreasing_mem_i1 (
    .clk( clk ),
    .in( s0 ),
    .set( clr ),
    .clr( init ),
    .din( s1 ),
    .out( own_temp ),
    .dout( s2 )
  );
  wires_out_gen0 wires_out_gen0_i2 (
    .in( own_temp ),
    .din( s2 ),
    .dout( dout ),
    .o0( o0 ),
    .o1( o1 )
  );
  assign own = own_temp;
endmodule

module wires_in_gen1 (
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  output [31:0] min,
  output [31:0] dmin
);
  wire [31:0] s0;
  wire [31:0] s1;
  cheap_min cheap_min_i0 (
    .a( i0 ),
    .b( i1 ),
    .da( di0 ),
    .db( di1 ),
    .min( s0 ),
    .dmin( s1 )
  );
  cheap_min cheap_min_i1 (
    .a( s0 ),
    .b( i2 ),
    .da( s1 ),
    .db( di2 ),
    .min( min ),
    .dmin( dmin )
  );
endmodule

module wires_out_gen1 (
  input [31:0] in,
  input [31:0] din,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire s2;
  wire [31:0] s3;
  wire s4;
  wire s5;
  wire [31:0] s6;
  wire s7;
  wire s8;
  wire [31:0] s9;
  wire s10;
  wire [31:0] s11;
  wire s12;
  wire [31:0] s13;
  wire s14;
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i0 (
    .a( din ),
    .b( din ),
    .c_i( 1'b0 ),
    .s( s3 ),
    .c_o( s4 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i1 (
    .a( in ),
    .b( 32'b100 ),
    .c_i( 1'b0 ),
    .s( s9 ),
    .c_o( s10 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i2 (
    .a( in ),
    .b( 32'b1000 ),
    .c_i( 1'b0 ),
    .s( s11 ),
    .c_o( s12 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i3 (
    .a( in ),
    .b( 32'b1011 ),
    .c_i( 1'b0 ),
    .s( s13 ),
    .c_o( s14 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i4 (
    .a( s3 ),
    .b( s3 ),
    .c_i( 1'b0 ),
    .s( s0 ),
    .c_o( s5 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i5 (
    .sel( s10 ),
    .in_0( s9 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i6 (
    .sel( s12 ),
    .in_0( s11 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o1 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i7 (
    .sel( s14 ),
    .in_0( s13 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o2 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i8 (
    .a( s0 ),
    .b( s0 ),
    .c_i( 1'b0 ),
    .s( s1 ),
    .c_o( s2 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i9 (
    .a( s1 ),
    .b( s1 ),
    .c_i( 1'b0 ),
    .s( s6 ),
    .c_o( s8 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i10 (
    .a( s6 ),
    .b( 32'b1 ),
    .c_i( 1'b0 ),
    .s( dout ),
    .c_o( s7 )
  );
endmodule

module node_module_gen1 (
  input init,
  input clk,
  input clr,
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  output [31:0] own,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2
);
  wire [31:0] own_temp;
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wires_in_gen1 wires_in_gen1_i0 (
    .i0( i0 ),
    .di0( di0 ),
    .i1( i1 ),
    .di1( di1 ),
    .i2( i2 ),
    .di2( di2 ),
    .min( s0 ),
    .dmin( s1 )
  );
  decreasing_mem decreasing_mem_i1 (
    .clk( clk ),
    .in( s0 ),
    .set( clr ),
    .clr( init ),
    .din( s1 ),
    .out( own_temp ),
    .dout( s2 )
  );
  wires_out_gen1 wires_out_gen1_i2 (
    .in( own_temp ),
    .din( s2 ),
    .dout( dout ),
    .o0( o0 ),
    .o1( o1 ),
    .o2( o2 )
  );
  assign own = own_temp;
endmodule

module wires_in_gen2 (
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  input [31:0] i3,
  input [31:0] di3,
  output [31:0] min,
  output [31:0] dmin
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wire [31:0] s3;
  cheap_min cheap_min_i0 (
    .a( i0 ),
    .b( i1 ),
    .da( di0 ),
    .db( di1 ),
    .min( s0 ),
    .dmin( s1 )
  );
  cheap_min cheap_min_i1 (
    .a( s0 ),
    .b( i2 ),
    .da( s1 ),
    .db( di2 ),
    .min( s2 ),
    .dmin( s3 )
  );
  cheap_min cheap_min_i2 (
    .a( s2 ),
    .b( i3 ),
    .da( s3 ),
    .db( di3 ),
    .min( min ),
    .dmin( dmin )
  );
endmodule

module wires_out_gen2 (
  input [31:0] in,
  input [31:0] din,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2,
  output [31:0] o3
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire s2;
  wire [31:0] s3;
  wire s4;
  wire s5;
  wire [31:0] s6;
  wire s7;
  wire s8;
  wire [31:0] s9;
  wire s10;
  wire [31:0] s11;
  wire s12;
  wire [31:0] s13;
  wire s14;
  wire [31:0] s15;
  wire s16;
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i0 (
    .a( din ),
    .b( din ),
    .c_i( 1'b0 ),
    .s( s3 ),
    .c_o( s4 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i1 (
    .a( in ),
    .b( 32'b1000 ),
    .c_i( 1'b0 ),
    .s( s9 ),
    .c_o( s10 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i2 (
    .a( in ),
    .b( 32'b111 ),
    .c_i( 1'b0 ),
    .s( s11 ),
    .c_o( s12 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i3 (
    .a( in ),
    .b( 32'b100 ),
    .c_i( 1'b0 ),
    .s( s13 ),
    .c_o( s14 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i4 (
    .a( in ),
    .b( 32'b10 ),
    .c_i( 1'b0 ),
    .s( s15 ),
    .c_o( s16 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i5 (
    .a( s3 ),
    .b( s3 ),
    .c_i( 1'b0 ),
    .s( s0 ),
    .c_o( s5 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i6 (
    .sel( s10 ),
    .in_0( s9 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i7 (
    .sel( s12 ),
    .in_0( s11 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o1 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i8 (
    .sel( s14 ),
    .in_0( s13 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o2 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i9 (
    .sel( s16 ),
    .in_0( s15 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o3 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i10 (
    .a( s0 ),
    .b( s0 ),
    .c_i( 1'b0 ),
    .s( s1 ),
    .c_o( s2 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i11 (
    .a( s1 ),
    .b( s1 ),
    .c_i( 1'b0 ),
    .s( s6 ),
    .c_o( s8 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i12 (
    .a( s6 ),
    .b( 32'b10 ),
    .c_i( 1'b0 ),
    .s( dout ),
    .c_o( s7 )
  );
endmodule

module node_module_gen2 (
  input init,
  input clk,
  input clr,
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  input [31:0] i3,
  input [31:0] di3,
  output [31:0] own,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2,
  output [31:0] o3
);
  wire [31:0] own_temp;
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wires_in_gen2 wires_in_gen2_i0 (
    .i0( i0 ),
    .di0( di0 ),
    .i1( i1 ),
    .di1( di1 ),
    .i2( i2 ),
    .di2( di2 ),
    .i3( i3 ),
    .di3( di3 ),
    .min( s0 ),
    .dmin( s1 )
  );
  decreasing_mem decreasing_mem_i1 (
    .clk( clk ),
    .in( s0 ),
    .set( clr ),
    .clr( init ),
    .din( s1 ),
    .out( own_temp ),
    .dout( s2 )
  );
  wires_out_gen2 wires_out_gen2_i2 (
    .in( own_temp ),
    .din( s2 ),
    .dout( dout ),
    .o0( o0 ),
    .o1( o1 ),
    .o2( o2 ),
    .o3( o3 )
  );
  assign own = own_temp;
endmodule

module wires_in_gen3 (
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  output [31:0] min,
  output [31:0] dmin
);
  wire [31:0] s0;
  wire [31:0] s1;
  cheap_min cheap_min_i0 (
    .a( i0 ),
    .b( i1 ),
    .da( di0 ),
    .db( di1 ),
    .min( s0 ),
    .dmin( s1 )
  );
  cheap_min cheap_min_i1 (
    .a( s0 ),
    .b( i2 ),
    .da( s1 ),
    .db( di2 ),
    .min( min ),
    .dmin( dmin )
  );
endmodule

module wires_out_gen3 (
  input [31:0] in,
  input [31:0] din,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire s2;
  wire [31:0] s3;
  wire s4;
  wire s5;
  wire [31:0] s6;
  wire s7;
  wire s8;
  wire [31:0] s9;
  wire s10;
  wire [31:0] s11;
  wire s12;
  wire [31:0] s13;
  wire s14;
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i0 (
    .a( din ),
    .b( din ),
    .c_i( 1'b0 ),
    .s( s3 ),
    .c_o( s4 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i1 (
    .a( in ),
    .b( 32'b111 ),
    .c_i( 1'b0 ),
    .s( s9 ),
    .c_o( s10 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i2 (
    .a( in ),
    .b( 32'b1001 ),
    .c_i( 1'b0 ),
    .s( s11 ),
    .c_o( s12 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i3 (
    .a( in ),
    .b( 32'b1110 ),
    .c_i( 1'b0 ),
    .s( s13 ),
    .c_o( s14 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i4 (
    .a( s3 ),
    .b( s3 ),
    .c_i( 1'b0 ),
    .s( s0 ),
    .c_o( s5 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i5 (
    .sel( s10 ),
    .in_0( s9 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i6 (
    .sel( s12 ),
    .in_0( s11 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o1 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i7 (
    .sel( s14 ),
    .in_0( s13 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o2 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i8 (
    .a( s0 ),
    .b( s0 ),
    .c_i( 1'b0 ),
    .s( s1 ),
    .c_o( s2 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i9 (
    .a( s1 ),
    .b( s1 ),
    .c_i( 1'b0 ),
    .s( s6 ),
    .c_o( s8 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i10 (
    .a( s6 ),
    .b( 32'b11 ),
    .c_i( 1'b0 ),
    .s( dout ),
    .c_o( s7 )
  );
endmodule

module node_module_gen3 (
  input init,
  input clk,
  input clr,
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  output [31:0] own,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2
);
  wire [31:0] own_temp;
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wires_in_gen3 wires_in_gen3_i0 (
    .i0( i0 ),
    .di0( di0 ),
    .i1( i1 ),
    .di1( di1 ),
    .i2( i2 ),
    .di2( di2 ),
    .min( s0 ),
    .dmin( s1 )
  );
  decreasing_mem decreasing_mem_i1 (
    .clk( clk ),
    .in( s0 ),
    .set( clr ),
    .clr( init ),
    .din( s1 ),
    .out( own_temp ),
    .dout( s2 )
  );
  wires_out_gen3 wires_out_gen3_i2 (
    .in( own_temp ),
    .din( s2 ),
    .dout( dout ),
    .o0( o0 ),
    .o1( o1 ),
    .o2( o2 )
  );
  assign own = own_temp;
endmodule

module wires_in_gen4 (
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  output [31:0] min,
  output [31:0] dmin
);
  cheap_min cheap_min_i0 (
    .a( i0 ),
    .b( i1 ),
    .da( di0 ),
    .db( di1 ),
    .min( min ),
    .dmin( dmin )
  );
endmodule

module wires_out_gen4 (
  input [31:0] in,
  input [31:0] din,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire s2;
  wire [31:0] s3;
  wire s4;
  wire s5;
  wire [31:0] s6;
  wire s7;
  wire s8;
  wire [31:0] s9;
  wire s10;
  wire [31:0] s11;
  wire s12;
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i0 (
    .a( din ),
    .b( din ),
    .c_i( 1'b0 ),
    .s( s3 ),
    .c_o( s4 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i1 (
    .a( in ),
    .b( 32'b1001 ),
    .c_i( 1'b0 ),
    .s( s9 ),
    .c_o( s10 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i2 (
    .a( in ),
    .b( 32'b1010 ),
    .c_i( 1'b0 ),
    .s( s11 ),
    .c_o( s12 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i3 (
    .a( s3 ),
    .b( s3 ),
    .c_i( 1'b0 ),
    .s( s0 ),
    .c_o( s5 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i4 (
    .sel( s10 ),
    .in_0( s9 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i5 (
    .sel( s12 ),
    .in_0( s11 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o1 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i6 (
    .a( s0 ),
    .b( s0 ),
    .c_i( 1'b0 ),
    .s( s1 ),
    .c_o( s2 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i7 (
    .a( s1 ),
    .b( s1 ),
    .c_i( 1'b0 ),
    .s( s6 ),
    .c_o( s8 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i8 (
    .a( s6 ),
    .b( 32'b100 ),
    .c_i( 1'b0 ),
    .s( dout ),
    .c_o( s7 )
  );
endmodule

module node_module_gen4 (
  input init,
  input clk,
  input clr,
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  output [31:0] own,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1
);
  wire [31:0] own_temp;
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wires_in_gen4 wires_in_gen4_i0 (
    .i0( i0 ),
    .di0( di0 ),
    .i1( i1 ),
    .di1( di1 ),
    .min( s0 ),
    .dmin( s1 )
  );
  decreasing_mem decreasing_mem_i1 (
    .clk( clk ),
    .in( s0 ),
    .set( clr ),
    .clr( init ),
    .din( s1 ),
    .out( own_temp ),
    .dout( s2 )
  );
  wires_out_gen4 wires_out_gen4_i2 (
    .in( own_temp ),
    .din( s2 ),
    .dout( dout ),
    .o0( o0 ),
    .o1( o1 )
  );
  assign own = own_temp;
endmodule

module wires_in_gen5 (
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  input [31:0] i3,
  input [31:0] di3,
  output [31:0] min,
  output [31:0] dmin
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wire [31:0] s3;
  cheap_min cheap_min_i0 (
    .a( i0 ),
    .b( i1 ),
    .da( di0 ),
    .db( di1 ),
    .min( s0 ),
    .dmin( s1 )
  );
  cheap_min cheap_min_i1 (
    .a( s0 ),
    .b( i2 ),
    .da( s1 ),
    .db( di2 ),
    .min( s2 ),
    .dmin( s3 )
  );
  cheap_min cheap_min_i2 (
    .a( s2 ),
    .b( i3 ),
    .da( s3 ),
    .db( di3 ),
    .min( min ),
    .dmin( dmin )
  );
endmodule

module wires_out_gen5 (
  input [31:0] in,
  input [31:0] din,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2,
  output [31:0] o3
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire s2;
  wire [31:0] s3;
  wire s4;
  wire s5;
  wire [31:0] s6;
  wire s7;
  wire s8;
  wire [31:0] s9;
  wire s10;
  wire [31:0] s11;
  wire s12;
  wire [31:0] s13;
  wire s14;
  wire [31:0] s15;
  wire s16;
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i0 (
    .a( din ),
    .b( din ),
    .c_i( 1'b0 ),
    .s( s3 ),
    .c_o( s4 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i1 (
    .a( in ),
    .b( 32'b100 ),
    .c_i( 1'b0 ),
    .s( s9 ),
    .c_o( s10 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i2 (
    .a( in ),
    .b( 32'b1110 ),
    .c_i( 1'b0 ),
    .s( s11 ),
    .c_o( s12 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i3 (
    .a( in ),
    .b( 32'b1010 ),
    .c_i( 1'b0 ),
    .s( s13 ),
    .c_o( s14 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i4 (
    .a( in ),
    .b( 32'b10 ),
    .c_i( 1'b0 ),
    .s( s15 ),
    .c_o( s16 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i5 (
    .a( s3 ),
    .b( s3 ),
    .c_i( 1'b0 ),
    .s( s0 ),
    .c_o( s5 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i6 (
    .sel( s10 ),
    .in_0( s9 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i7 (
    .sel( s12 ),
    .in_0( s11 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o1 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i8 (
    .sel( s14 ),
    .in_0( s13 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o2 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i9 (
    .sel( s16 ),
    .in_0( s15 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o3 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i10 (
    .a( s0 ),
    .b( s0 ),
    .c_i( 1'b0 ),
    .s( s1 ),
    .c_o( s2 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i11 (
    .a( s1 ),
    .b( s1 ),
    .c_i( 1'b0 ),
    .s( s6 ),
    .c_o( s8 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i12 (
    .a( s6 ),
    .b( 32'b101 ),
    .c_i( 1'b0 ),
    .s( dout ),
    .c_o( s7 )
  );
endmodule

module node_module_gen5 (
  input init,
  input clk,
  input clr,
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  input [31:0] i3,
  input [31:0] di3,
  output [31:0] own,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2,
  output [31:0] o3
);
  wire [31:0] own_temp;
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wires_in_gen5 wires_in_gen5_i0 (
    .i0( i0 ),
    .di0( di0 ),
    .i1( i1 ),
    .di1( di1 ),
    .i2( i2 ),
    .di2( di2 ),
    .i3( i3 ),
    .di3( di3 ),
    .min( s0 ),
    .dmin( s1 )
  );
  decreasing_mem decreasing_mem_i1 (
    .clk( clk ),
    .in( s0 ),
    .set( clr ),
    .clr( init ),
    .din( s1 ),
    .out( own_temp ),
    .dout( s2 )
  );
  wires_out_gen5 wires_out_gen5_i2 (
    .in( own_temp ),
    .din( s2 ),
    .dout( dout ),
    .o0( o0 ),
    .o1( o1 ),
    .o2( o2 ),
    .o3( o3 )
  );
  assign own = own_temp;
endmodule

module wires_in_gen6 (
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  output [31:0] min,
  output [31:0] dmin
);
  wire [31:0] s0;
  wire [31:0] s1;
  cheap_min cheap_min_i0 (
    .a( i0 ),
    .b( i1 ),
    .da( di0 ),
    .db( di1 ),
    .min( s0 ),
    .dmin( s1 )
  );
  cheap_min cheap_min_i1 (
    .a( s0 ),
    .b( i2 ),
    .da( s1 ),
    .db( di2 ),
    .min( min ),
    .dmin( dmin )
  );
endmodule

module wires_out_gen6 (
  input [31:0] in,
  input [31:0] din,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire s2;
  wire [31:0] s3;
  wire s4;
  wire s5;
  wire [31:0] s6;
  wire s7;
  wire s8;
  wire [31:0] s9;
  wire s10;
  wire [31:0] s11;
  wire s12;
  wire [31:0] s13;
  wire s14;
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i0 (
    .a( din ),
    .b( din ),
    .c_i( 1'b0 ),
    .s( s3 ),
    .c_o( s4 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i1 (
    .a( in ),
    .b( 32'b110 ),
    .c_i( 1'b0 ),
    .s( s9 ),
    .c_o( s10 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i2 (
    .a( in ),
    .b( 32'b10 ),
    .c_i( 1'b0 ),
    .s( s11 ),
    .c_o( s12 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i3 (
    .a( in ),
    .b( 32'b1 ),
    .c_i( 1'b0 ),
    .s( s13 ),
    .c_o( s14 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i4 (
    .a( s3 ),
    .b( s3 ),
    .c_i( 1'b0 ),
    .s( s0 ),
    .c_o( s5 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i5 (
    .sel( s10 ),
    .in_0( s9 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i6 (
    .sel( s12 ),
    .in_0( s11 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o1 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i7 (
    .sel( s14 ),
    .in_0( s13 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o2 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i8 (
    .a( s0 ),
    .b( s0 ),
    .c_i( 1'b0 ),
    .s( s1 ),
    .c_o( s2 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i9 (
    .a( s1 ),
    .b( s1 ),
    .c_i( 1'b0 ),
    .s( s6 ),
    .c_o( s8 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i10 (
    .a( s6 ),
    .b( 32'b110 ),
    .c_i( 1'b0 ),
    .s( dout ),
    .c_o( s7 )
  );
endmodule

module node_module_gen6 (
  input init,
  input clk,
  input clr,
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  output [31:0] own,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2
);
  wire [31:0] own_temp;
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wires_in_gen6 wires_in_gen6_i0 (
    .i0( i0 ),
    .di0( di0 ),
    .i1( i1 ),
    .di1( di1 ),
    .i2( i2 ),
    .di2( di2 ),
    .min( s0 ),
    .dmin( s1 )
  );
  decreasing_mem decreasing_mem_i1 (
    .clk( clk ),
    .in( s0 ),
    .set( clr ),
    .clr( init ),
    .din( s1 ),
    .out( own_temp ),
    .dout( s2 )
  );
  wires_out_gen6 wires_out_gen6_i2 (
    .in( own_temp ),
    .din( s2 ),
    .dout( dout ),
    .o0( o0 ),
    .o1( o1 ),
    .o2( o2 )
  );
  assign own = own_temp;
endmodule

module wires_in_gen7 (
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  input [31:0] i3,
  input [31:0] di3,
  output [31:0] min,
  output [31:0] dmin
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wire [31:0] s3;
  cheap_min cheap_min_i0 (
    .a( i0 ),
    .b( i1 ),
    .da( di0 ),
    .db( di1 ),
    .min( s0 ),
    .dmin( s1 )
  );
  cheap_min cheap_min_i1 (
    .a( s0 ),
    .b( i2 ),
    .da( s1 ),
    .db( di2 ),
    .min( s2 ),
    .dmin( s3 )
  );
  cheap_min cheap_min_i2 (
    .a( s2 ),
    .b( i3 ),
    .da( s3 ),
    .db( di3 ),
    .min( min ),
    .dmin( dmin )
  );
endmodule

module wires_out_gen7 (
  input [31:0] in,
  input [31:0] din,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2,
  output [31:0] o3
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire s2;
  wire [31:0] s3;
  wire s4;
  wire s5;
  wire [31:0] s6;
  wire s7;
  wire s8;
  wire [31:0] s9;
  wire s10;
  wire [31:0] s11;
  wire s12;
  wire [31:0] s13;
  wire s14;
  wire [31:0] s15;
  wire s16;
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i0 (
    .a( din ),
    .b( din ),
    .c_i( 1'b0 ),
    .s( s3 ),
    .c_o( s4 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i1 (
    .a( in ),
    .b( 32'b1000 ),
    .c_i( 1'b0 ),
    .s( s9 ),
    .c_o( s10 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i2 (
    .a( in ),
    .b( 32'b1011 ),
    .c_i( 1'b0 ),
    .s( s11 ),
    .c_o( s12 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i3 (
    .a( in ),
    .b( 32'b111 ),
    .c_i( 1'b0 ),
    .s( s13 ),
    .c_o( s14 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i4 (
    .a( in ),
    .b( 32'b1 ),
    .c_i( 1'b0 ),
    .s( s15 ),
    .c_o( s16 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i5 (
    .a( s3 ),
    .b( s3 ),
    .c_i( 1'b0 ),
    .s( s0 ),
    .c_o( s5 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i6 (
    .sel( s10 ),
    .in_0( s9 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i7 (
    .sel( s12 ),
    .in_0( s11 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o1 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i8 (
    .sel( s14 ),
    .in_0( s13 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o2 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i9 (
    .sel( s16 ),
    .in_0( s15 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o3 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i10 (
    .a( s0 ),
    .b( s0 ),
    .c_i( 1'b0 ),
    .s( s1 ),
    .c_o( s2 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i11 (
    .a( s1 ),
    .b( s1 ),
    .c_i( 1'b0 ),
    .s( s6 ),
    .c_o( s8 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i12 (
    .a( s6 ),
    .b( 32'b111 ),
    .c_i( 1'b0 ),
    .s( dout ),
    .c_o( s7 )
  );
endmodule

module node_module_gen7 (
  input init,
  input clk,
  input clr,
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  input [31:0] i3,
  input [31:0] di3,
  output [31:0] own,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2,
  output [31:0] o3
);
  wire [31:0] own_temp;
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wires_in_gen7 wires_in_gen7_i0 (
    .i0( i0 ),
    .di0( di0 ),
    .i1( i1 ),
    .di1( di1 ),
    .i2( i2 ),
    .di2( di2 ),
    .i3( i3 ),
    .di3( di3 ),
    .min( s0 ),
    .dmin( s1 )
  );
  decreasing_mem decreasing_mem_i1 (
    .clk( clk ),
    .in( s0 ),
    .set( clr ),
    .clr( init ),
    .din( s1 ),
    .out( own_temp ),
    .dout( s2 )
  );
  wires_out_gen7 wires_out_gen7_i2 (
    .in( own_temp ),
    .din( s2 ),
    .dout( dout ),
    .o0( o0 ),
    .o1( o1 ),
    .o2( o2 ),
    .o3( o3 )
  );
  assign own = own_temp;
endmodule

module wires_in_gen8 (
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  output [31:0] min,
  output [31:0] dmin
);
  wire [31:0] s0;
  wire [31:0] s1;
  cheap_min cheap_min_i0 (
    .a( i0 ),
    .b( i1 ),
    .da( di0 ),
    .db( di1 ),
    .min( s0 ),
    .dmin( s1 )
  );
  cheap_min cheap_min_i1 (
    .a( s0 ),
    .b( i2 ),
    .da( s1 ),
    .db( di2 ),
    .min( min ),
    .dmin( dmin )
  );
endmodule

module wires_out_gen8 (
  input [31:0] in,
  input [31:0] din,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire s2;
  wire [31:0] s3;
  wire s4;
  wire s5;
  wire [31:0] s6;
  wire s7;
  wire s8;
  wire [31:0] s9;
  wire s10;
  wire [31:0] s11;
  wire s12;
  wire [31:0] s13;
  wire s14;
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i0 (
    .a( din ),
    .b( din ),
    .c_i( 1'b0 ),
    .s( s3 ),
    .c_o( s4 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i1 (
    .a( in ),
    .b( 32'b10 ),
    .c_i( 1'b0 ),
    .s( s9 ),
    .c_o( s10 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i2 (
    .a( in ),
    .b( 32'b110 ),
    .c_i( 1'b0 ),
    .s( s11 ),
    .c_o( s12 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i3 (
    .a( in ),
    .b( 32'b111 ),
    .c_i( 1'b0 ),
    .s( s13 ),
    .c_o( s14 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i4 (
    .a( s3 ),
    .b( s3 ),
    .c_i( 1'b0 ),
    .s( s0 ),
    .c_o( s5 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i5 (
    .sel( s10 ),
    .in_0( s9 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o0 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i6 (
    .sel( s12 ),
    .in_0( s11 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o1 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i7 (
    .sel( s14 ),
    .in_0( s13 ),
    .in_1( 32'b11111111111111111111111111111111 ),
    .out( o2 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i8 (
    .a( s0 ),
    .b( s0 ),
    .c_i( 1'b0 ),
    .s( s1 ),
    .c_o( s2 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i9 (
    .a( s1 ),
    .b( s1 ),
    .c_i( 1'b0 ),
    .s( s6 ),
    .c_o( s8 )
  );
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i10 (
    .a( s6 ),
    .b( 32'b1000 ),
    .c_i( 1'b0 ),
    .s( dout ),
    .c_o( s7 )
  );
endmodule

module node_module_gen8 (
  input init,
  input clk,
  input clr,
  input [31:0] i0,
  input [31:0] di0,
  input [31:0] i1,
  input [31:0] di1,
  input [31:0] i2,
  input [31:0] di2,
  output [31:0] own,
  output [31:0] dout,
  output [31:0] o0,
  output [31:0] o1,
  output [31:0] o2
);
  wire [31:0] own_temp;
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wires_in_gen8 wires_in_gen8_i0 (
    .i0( i0 ),
    .di0( di0 ),
    .i1( i1 ),
    .di1( di1 ),
    .i2( i2 ),
    .di2( di2 ),
    .min( s0 ),
    .dmin( s1 )
  );
  decreasing_mem decreasing_mem_i1 (
    .clk( clk ),
    .in( s0 ),
    .set( clr ),
    .clr( init ),
    .din( s1 ),
    .out( own_temp ),
    .dout( s2 )
  );
  wires_out_gen8 wires_out_gen8_i2 (
    .in( own_temp ),
    .din( s2 ),
    .dout( dout ),
    .o0( o0 ),
    .o1( o1 ),
    .o2( o2 )
  );
  assign own = own_temp;
endmodule

module DIG_Counter_Nbit
#(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg [(Bits-1):0] count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule


module final_countup_gen0 (
  input clk,
  input clr,
  output out
);
  wire s0;
  wire [31:0] s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  DIG_Counter_Nbit #(
    .Bits(32)
  )
  DIG_Counter_Nbit_i0 (
    .en( s0 ),
    .C( clk ),
    .clr( clr ),
    .out( s1 ),
    .ovf( s2 )
  );
  CompUnsigned #(
    .Bits(32)
  )
  CompUnsigned_i1 (
    .a( 32'b1001 ),
    .b( s1 ),
    .\> ( s3 ),
    .\= ( s4 ),
    .\< ( s5 )
  );
  assign s0 = (s3 & 1'b1);
  assign out = (s4 | s5);
endmodule

module Mux_16x1_NBits #(
    parameter Bits = 2
)
(
    input [3:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    input [(Bits - 1):0] in_8,
    input [(Bits - 1):0] in_9,
    input [(Bits - 1):0] in_10,
    input [(Bits - 1):0] in_11,
    input [(Bits - 1):0] in_12,
    input [(Bits - 1):0] in_13,
    input [(Bits - 1):0] in_14,
    input [(Bits - 1):0] in_15,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            4'h0: out = in_0;
            4'h1: out = in_1;
            4'h2: out = in_2;
            4'h3: out = in_3;
            4'h4: out = in_4;
            4'h5: out = in_5;
            4'h6: out = in_6;
            4'h7: out = in_7;
            4'h8: out = in_8;
            4'h9: out = in_9;
            4'ha: out = in_10;
            4'hb: out = in_11;
            4'hc: out = in_12;
            4'hd: out = in_13;
            4'he: out = in_14;
            4'hf: out = in_15;
            default:
                out = 'h0;
        endcase
    end
endmodule


module extract_path_gen0 (
  input [31:0] sel,
  input clk,
  input clr,
  input [31:0] i0,
  input [31:0] i1,
  input [31:0] i2,
  input [31:0] i3,
  input [31:0] i4,
  input [31:0] i5,
  input [31:0] i6,
  input [31:0] i7,
  input [31:0] i8,
  output [31:0] out
);
  wire s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wire [3:0] s3;
  wire [27:0] s4;
  final_countup_gen0 final_countup_gen0_i0 (
    .clk( clk ),
    .clr( clr ),
    .out( s0 )
  );
  assign s3 = sel[3:0];
  assign s4 = sel[31:4];
  Mux_16x1_NBits #(
    .Bits(32)
  )
  Mux_16x1_NBits_i1 (
    .sel( s3 ),
    .in_0( i0 ),
    .in_1( i1 ),
    .in_2( i2 ),
    .in_3( i3 ),
    .in_4( i4 ),
    .in_5( i5 ),
    .in_6( i6 ),
    .in_7( i7 ),
    .in_8( i8 ),
    .in_9( 32'b0 ),
    .in_10( 32'b0 ),
    .in_11( 32'b0 ),
    .in_12( 32'b0 ),
    .in_13( 32'b0 ),
    .in_14( 32'b0 ),
    .in_15( 32'b0 ),
    .out( s1 )
  );
  DIG_D_FF_AS_Nbit #(
    .Bits(32),
    .Default(0)
  )
  DIG_D_FF_AS_Nbit_i2 (
    .Set( 1'b0 ),
    .D( s1 ),
    .C( s0 ),
    .Clr( clr ),
    .Q( out ),
    .\~Q ( s2 )
  );
endmodule

module example (
  input clk,
  input [31:0] VT,
  input [31:0] VS,
  input clr,
  output [31:0] SPW,
  output [31:0] SP
);
  wire s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wire [31:0] s3;
  wire [31:0] s4;
  wire [31:0] s5;
  wire [31:0] s6;
  wire [31:0] s7;
  wire [31:0] s8;
  wire s9;
  wire [31:0] s10;
  wire [31:0] s11;
  wire [31:0] s12;
  wire [31:0] s13;
  wire [31:0] s14;
  wire [31:0] s15;
  wire s16;
  wire [31:0] s17;
  wire [31:0] s18;
  wire [31:0] s19;
  wire [31:0] s20;
  wire [31:0] s21;
  wire [31:0] s22;
  wire [31:0] s23;
  wire [31:0] s24;
  wire [31:0] s25;
  wire [31:0] s26;
  wire s27;
  wire [31:0] s28;
  wire [31:0] s29;
  wire [31:0] s30;
  wire [31:0] s31;
  wire [31:0] s32;
  wire [31:0] s33;
  wire s34;
  wire [31:0] s35;
  wire [31:0] s36;
  wire [31:0] s37;
  wire s38;
  wire [31:0] s39;
  wire [31:0] s40;
  wire [31:0] s41;
  wire [31:0] s42;
  wire s43;
  wire [31:0] s44;
  wire [31:0] s45;
  wire [31:0] s46;
  wire [31:0] s47;
  wire [31:0] s48;
  wire s49;
  wire [31:0] s50;
  wire [31:0] s51;
  wire [31:0] s52;
  wire s53;
  wire [31:0] s54;
  wire [3:0] s55;
  wire [27:0] s56;
  wire s57;
  wire s58;
  wire s59;
  wire s60;
  wire s61;
  wire s62;
  wire s63;
  assign s55 = VS[3:0];
  assign s56 = VS[31:4];
  Demux4 Demux4_i0 (
    .sel( s55 ),
    .in( 1'b1 ),
    .out_0( s0 ),
    .out_1( s9 ),
    .out_2( s16 ),
    .out_3( s27 ),
    .out_4( s34 ),
    .out_5( s38 ),
    .out_6( s43 ),
    .out_7( s49 ),
    .out_8( s53 ),
    .out_9( s57 ),
    .out_10( s58 ),
    .out_11( s59 ),
    .out_12( s60 ),
    .out_13( s61 ),
    .out_14( s62 ),
    .out_15( s63 )
  );
  // 0
  node_module_gen0 node_module_gen0_i1 (
    .init( s0 ),
    .clk( clk ),
    .clr( clr ),
    .i0( s1 ),
    .di0( s2 ),
    .i1( s3 ),
    .di1( s4 ),
    .own( s5 ),
    .dout( s6 ),
    .o0( s7 ),
    .o1( s8 )
  );
  // 1
  node_module_gen1 node_module_gen1_i2 (
    .init( s9 ),
    .clk( clk ),
    .clr( clr ),
    .i0( s7 ),
    .di0( s6 ),
    .i1( s10 ),
    .di1( s11 ),
    .i2( s12 ),
    .di2( s4 ),
    .own( s13 ),
    .dout( s2 ),
    .o0( s1 ),
    .o1( s14 ),
    .o2( s15 )
  );
  // 2
  node_module_gen2 node_module_gen2_i3 (
    .init( s16 ),
    .clk( clk ),
    .clr( clr ),
    .i0( s14 ),
    .di0( s2 ),
    .i1( s17 ),
    .di1( s18 ),
    .i2( s19 ),
    .di2( s20 ),
    .i3( s21 ),
    .di3( s22 ),
    .own( s23 ),
    .dout( s11 ),
    .o0( s10 ),
    .o1( s24 ),
    .o2( s25 ),
    .o3( s26 )
  );
  // 3
  node_module_gen3 node_module_gen3_i4 (
    .init( s27 ),
    .clk( clk ),
    .clr( clr ),
    .i0( s24 ),
    .di0( s11 ),
    .i1( s28 ),
    .di1( s29 ),
    .i2( s30 ),
    .di2( s20 ),
    .own( s31 ),
    .dout( s18 ),
    .o0( s17 ),
    .o1( s32 ),
    .o2( s33 )
  );
  // 4
  node_module_gen4 node_module_gen4_i5 (
    .init( s34 ),
    .clk( clk ),
    .clr( clr ),
    .i0( s32 ),
    .di0( s18 ),
    .i1( s35 ),
    .di1( s20 ),
    .own( s36 ),
    .dout( s29 ),
    .o0( s28 ),
    .o1( s37 )
  );
  // 5
  node_module_gen5 node_module_gen5_i6 (
    .init( s38 ),
    .clk( clk ),
    .clr( clr ),
    .i0( s37 ),
    .di0( s29 ),
    .i1( s39 ),
    .di1( s40 ),
    .i2( s33 ),
    .di2( s18 ),
    .i3( s25 ),
    .di3( s11 ),
    .own( s41 ),
    .dout( s20 ),
    .o0( s19 ),
    .o1( s30 ),
    .o2( s35 ),
    .o3( s42 )
  );
  // 6
  node_module_gen6 node_module_gen6_i7 (
    .init( s43 ),
    .clk( clk ),
    .clr( clr ),
    .i0( s42 ),
    .di0( s20 ),
    .i1( s44 ),
    .di1( s4 ),
    .i2( s45 ),
    .di2( s22 ),
    .own( s46 ),
    .dout( s40 ),
    .o0( s47 ),
    .o1( s39 ),
    .o2( s48 )
  );
  // 7
  node_module_gen7 node_module_gen7_i8 (
    .init( s49 ),
    .clk( clk ),
    .clr( clr ),
    .i0( s48 ),
    .di0( s40 ),
    .i1( s50 ),
    .di1( s22 ),
    .i2( s15 ),
    .di2( s2 ),
    .i3( s8 ),
    .di3( s6 ),
    .own( s51 ),
    .dout( s4 ),
    .o0( s3 ),
    .o1( s12 ),
    .o2( s52 ),
    .o3( s44 )
  );
  // 8
  node_module_gen8 node_module_gen8_i9 (
    .init( s53 ),
    .clk( clk ),
    .clr( clr ),
    .i0( s47 ),
    .di0( s40 ),
    .i1( s52 ),
    .di1( s4 ),
    .i2( s26 ),
    .di2( s11 ),
    .own( s54 ),
    .dout( s22 ),
    .o0( s21 ),
    .o1( s45 ),
    .o2( s50 )
  );
  extract_path_gen0 extract_path_gen0_i10 (
    .sel( VT ),
    .clk( clk ),
    .clr( clr ),
    .i0( s5 ),
    .i1( s13 ),
    .i2( s23 ),
    .i3( s31 ),
    .i4( s36 ),
    .i5( s41 ),
    .i6( s46 ),
    .i7( s51 ),
    .i8( s54 ),
    .out( SPW )
  );
  extract_path_gen0 extract_path_gen0_i11 (
    .sel( VT ),
    .clk( clk ),
    .clr( clr ),
    .i0( s6 ),
    .i1( s2 ),
    .i2( s11 ),
    .i3( s18 ),
    .i4( s29 ),
    .i5( s20 ),
    .i6( s40 ),
    .i7( s4 ),
    .i8( s22 ),
    .out( SP )
  );
endmodule
